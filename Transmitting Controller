/*
* GccApplication36.cpp
*
* Created: 4/4/2020 9:10:17 PM
* Author : Nicholas
*/
//NEW TRANSMITTING MICROCONTROLLER CODE
#include <avr/io.h>
void initialize_usart(void); //Function to set up USART
void transmit_data_usart(int); //Function to transmit a byte by USART
char sensorval = 0;//Value from pot, dropping last two bits so can be char

int main(void)
{
	initialize_usart(); //Start the USART
	DDRC = 0x00;//Sets PORTC to input
	PRR = 0x00;//Clears power reduction
	ADCSRA = 0b10000111;//Enables ADC and sets freq to 128
	ADMUX = 0b01100101;//Sets reff voltage, sets to left justified, connects to ADC5(PC5)
	while (1)
	{
		//HAVE TO ADD THE ADC
		ADCSRA |= (1<<ADSC);//Turns on 6 bit to start conversion
		while ((ADCSRA & (1<<ADIF))==0){//Checks bit 4 to see if flag is up(finished reading)
			sensorval = ADCH;//Reads the sensor value
			
			transmit_data_usart(sensorval);//Transmitting the sensor value
		}
		
		
		
	}
	return 0;
}//End main

void initialize_usart(void){//Sets up USART
	UCSR0B = 0b00010000;//Enables serial transmission
	UCSR0C = 0b00000110;//Asynchronous mode, 8-bit data, no parity, 1 stop bit
	UBRR0L = 0x67;//16MHz crystal clock, 9600 Baud Rate
	
}//End USART set up

void transmit_data_usart(int data){//Sends data
	while(!(UCSR0A & 0b00100000));//Makes sure transmit buffer is ready
	UDR0 = data;
	
}
